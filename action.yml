name: 'Build And Push'
description: GitHub Action for build and push docker images - Sysdig way'
outputs:
  names:
    description: "Image names"
    value: ${{ steps.build_image_names.outputs.names }}
  tags:
    description: "git tag version calculated"
    value: ${{ steps.meta.outputs.tags }}
  labels:
    description: "Labels added to container image"
    value: ${{ steps.meta.outputs.labels }}
inputs:
  image_name:
    description: "name of the docker image. Example: redis-6"
    required: true

  image_description:
    description: "description of the docker image. Example: sysdig redis-6 image"
    required: true

  image_tag_string_suffix:
    description: "optional string that will be added after the semver in the tag like: xxx/myimg:0.0.1-string instead of xxx/myimg:0.0.1"
    default: ""
    required: false

  context_path:
    description: "path to context directory (where the build starts)"
    required: true

  dockerfile:
    description: "path to docker file (defaults to {{context_path}}/Dockerfile)"
    required: false
    default: Dockerfile

  # Needed when run_scanner is true
  sysdig_secure_token:
    description: "API token for Sysdig Scanning auth"
    required: false

  # wether to create git tag and push the image
  dry_run:
    description: "whether to actually create git tag and push the image"
    required: false
    default: "false"
  # flags for pushing to artifactory or quay
  push_to_artifactory:
    default: "true"
    required: false
  push_to_quay:
    default: "false"
    required: false
  push_to_gar:
    default: "false"
    required: false

  artifactory_prefix:
    description: "prefix for artifactory repository. Example: docker.internal.sysdig.com"
    default: "docker.internal.sysdig.com"
    required: false
  quay_prefix:
    description: "prefix for quay repository. Example: docker.internal.sysdig.com"
    default: "quay.io/sysdig"
    required: false
  gar_prefix:
    description: "prefix for gar repository. Example: docker.internal.sysdig.com"
    default: "us-docker.pkg.dev/sysdig-artifact-registry-dev/gar-docker/infra"
    required: false

  artifactory_username:
    description: "Artifactory Username Secret"
    default: ""
    required: false
  artifactory_password:
    description: "Artifactory Password Secret"
    default: ""
    required: false
  artifactory_url:
    description: "Artifactory URL"
    required: false
    default: "docker.internal.sysdig.com"
  quay_username:
    description: "Quay Username Secret"
    default: ""
    required: false
  quay_password:
    description: "Quay Password Secret"
    default: ""
    required: false
  gar_password:
    description: "GAR Password Secret"
    default: ""
    required: false
  github_token:
    description: "GITHUB Token used to tag the repo"
    required: true

  upload_artifact:
    description: "whether to upload the docker image as gh artifact"
    required: false
    default: "false"

  run_scanner:
    description: "Enables the sysdig security scanner"
    required: false
    default: "false"

  scan_type:
    description: "The type of scan to perform"
    required: false
    default: "both" # "legacy","new" or "both"

  # Sysdig Scanner legacy
  severity:
    description: "Severity level to fail the scan"
    required: false
    default: "high"

  # Sysdig Scanner legacy
  sysdig-skip-tls:
    description: "Skip TLS verification when calling secure endpoints."
    required: false
    default: "false"

  # Sysdig Scanner
  policy-list:
    description: "Comma separated list of policies to include"
    required: false
    default: ""

runs:
  using: "composite"
  steps:
    - uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    # NOTE: the following workaround is needed to explicitly set up the context for buildx when running on DinD
    - name: Custom docker context for use with self_hosted runners
      shell: bash
      run: if ! (docker context ls | grep -q mycontext) ;then docker context create mycontext; fi

    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v2
      with:
        endpoint: mycontext

    - name: Login to Artifactory
      uses: docker/login-action@v2
      if: ${{inputs.artifactory_username != '' && inputs.artifactory_password != '' }}
      with:
        registry: ${{ inputs.artifactory_url }}
        username: ${{ inputs.artifactory_username }}
        password: ${{ inputs.artifactory_password }}

    - name: Login to Quay
      uses: docker/login-action@v2
      if: ${{inputs.quay_username != '' && inputs.quay_password != ''  }}
      with:
        registry: quay.io
        username: ${{ inputs.quay_username }}
        password: ${{ inputs.quay_password }}

    - name: Login to GAR
      uses: docker/login-action@v2
      if: ${{inputs.gar_password != '' }}
      with:
        registry: ${{ inputs.gar_prefix }}
        username: _json_key
        password: ${{ inputs.gar_password }}

    - name: Bump container version and create new github tag
      id: bump_version
      uses: mathieudutour/github-tag-action@v6.1
      with:
        github_token: ${{ inputs.github_token }}
        tag_prefix: container/${{ inputs.image_name }}-
        fetch_all_tags: true
        dry_run: ${{ inputs.dry_run }}

    - name: Build images names
      id: build_image_names
      shell: bash
      env:
        PUSH_TO_ARTIFACTORY: ${{ inputs.push_to_artifactory }}
        PUSH_TO_QUAY: ${{ inputs.push_to_quay }}
        PUSH_TO_GAR: ${{ inputs.push_to_gar }}
      run: |
        json='[]'
        $PUSH_TO_ARTIFACTORY && json=$(echo $json | jq -cr ". += [\"${{inputs.artifactory_prefix}}/${{inputs.image_name}}\"]")
        $PUSH_TO_QUAY && json=$(echo $json | jq -cr ". += [\"${{inputs.quay_prefix}}/${{inputs.image_name}}\"]")
        $PUSH_TO_GAR && json=$(echo $json | jq -cr ". += [\"${{inputs.gar_prefix}}/${{inputs.image_name}}\"]")
        names=$(echo $json | jq -r '. | join(",")')
        echo "names=${names}" >> $GITHUB_OUTPUT

    # By default the img tag is the bumped version of the last tag
    # In some edge cases we need to append a string
    # See "image_tag_string_suffix" in inputs section
    - name: Add optional string suffix in img tag
      shell: bash
      id: image_tag
      run: |
        [[ -n "${{ inputs.image_tag_string_suffix }}" ]] && _ver=${{ steps.bump_version.outputs.new_version }}-${{ inputs.image_tag_string_suffix }} || _ver=${{ steps.bump_version.outputs.new_version }}
        echo "ver=${_ver}" >> $GITHUB_OUTPUT

    - name: Build container meta
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ steps.build_image_names.outputs.names }}
        flavor: |
          latest=auto
          prefix=
          suffix=
        labels: |
          org.opencontainers.image.title=${{ inputs.image_name }}
          org.opencontainers.image.description=${{ inputs.image_description }}
        tags: |
          type=raw,value=${{ steps.image_tag.outputs.ver }}

    - name: Build container
      uses: docker/build-push-action@v4
      with:
        context: ${{ inputs.context_path }}
        file: ${{ inputs.context_path }}/${{ inputs.dockerfile }}
        push: false
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        load: true

    # Scan only one container name
    # This is needed because if you add/enable the push to quay.io, gar or artifactory (or all of them), there is a list of images with different registries.
    # Both are the same but we just need one to do the scanning. Usually artifactory is the first one of the list
    - name: Local container tag
      if: inputs.run_scanner == 'true'
      shell: bash
      id: container
      run: |
        CONTAINER_TAG=$(echo -e '${{steps.meta.outputs.tags}}' | head -n 1)
        echo "container-tag=${CONTAINER_TAG}" >> $GITHUB_OUTPUT

    - name: Scan image
      if: inputs.run_scanner == 'true'
      uses: draios/infra-action-sysdig-scan@v0.0.2
      with:
        image-tag: ${{ steps.container.outputs.container-tag }}
        sysdig-secure-token: ${{ inputs.sysdig_secure_token }}
        scan-type: ${{ inputs.scan_type }}
        sysdig-secure-url: "https://prodmon.app.sysdig.com"
        severity: ${{ inputs.severity }}
        sysdig-skip-tls: ${{ inputs.sysdig-skip-tls }}
        policy-list: ${{ inputs.policy-list }}

    - name: Push container
      uses: docker/build-push-action@v4
      with:
        context: ${{ inputs.context_path }}
        file: ${{ inputs.context_path }}/${{ inputs.dockerfile }}
        push: ${{ inputs.dry_run != 'true' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

    - name: Load image to file
      uses: docker/build-push-action@v4
      if: ${{ inputs.upload_artifact == 'true' }}
      with:
        context: ${{ inputs.context_path }}
        file: ${{ inputs.context_path }}/${{ inputs.dockerfile }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        outputs: type=docker,dest=/tmp/image.tar

    - name: Upload docker image as artifact
      uses: actions/upload-artifact@v3
      if: ${{ inputs.upload_artifact == 'true' }}
      with:
        name: image
        path: /tmp/image.tar
        retention-days: 2
